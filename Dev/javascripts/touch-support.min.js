var THREE=AFRAME.THREE,GRABBING_CLASS="a-grabbing",PI_2=Math.PI/2,radToDeg=THREE.Math.radToDeg,checkHasPositionalTracking=AFRAME.utils.device.checkHasPositionalTracking,vrDisplay,polyfilledVRDisplay;function bind(fn,ctx){return prependedArgs=Array.prototype.slice.call(arguments,2),function bound(){var args=prependedArgs.concat(Array.prototype.slice.call(arguments,0));return fn.apply(ctx,args)};var prependedArgs}function clamp(num,min,max){return num<=min?min:num>=max?max:num}function PolyfillControls(object){var frameData;window.VRFrameData&&(frameData=new window.VRFrameData),this.update=function(){var pose;vrDisplay&&polyfilledVRDisplay&&(vrDisplay.getFrameData(frameData),null!==(pose=frameData.pose).orientation&&object.quaternion.fromArray(pose.orientation),null!==pose.position?object.position.fromArray(pose.position):object.position.set(0,0,0))}}var POLYFILL_VRDISPLAY_ID="Cardboard VRDisplay (webvr-polyfill)";AFRAME.registerComponent("touch-look-controls",{dependencies:["position","rotation"],schema:{enabled:{default:!0},touchEnabled:{default:!0},hmdEnabled:{default:!0},pointerLockEnabled:{default:!1},reverseMouseDrag:{default:!1}},init:function(){this.previousHMDPosition=new THREE.Vector3,this.hmdQuaternion=new THREE.Quaternion,this.hmdEuler=new THREE.Euler,this.position=new THREE.Vector3,this.savedRotation=new THREE.Vector3,this.savedPosition=new THREE.Vector3,this.polyfillObject=new THREE.Object3D,this.polyfillControls=new PolyfillControls(this.polyfillObject),this.rotation={},this.deltaRotation={},this.savedPose=null,this.pointerLocked=!1,this.setupMouseControls(),this.bindMethods(),this.el.sceneEl.is("vr-mode")&&this.onEnterVR()},update:function(oldData){var data=this.data;data.enabled!==oldData.enabled&&this.updateGrabCursor(data.enabled),!oldData||data.hmdEnabled||oldData.hmdEnabled||(this.pitchObject.rotation.set(0,0,0),this.yawObject.rotation.set(0,0,0)),oldData&&!data.pointerLockEnabled!==oldData.pointerLockEnabled&&(this.removeEventListeners(),this.addEventListeners(),this.pointerLocked&&document.exitPointerLock())},tick:function(t){var data;this.data.enabled&&this.updateOrientation()},play:function(){this.addEventListeners()},pause:function(){this.removeEventListeners()},remove:function(){this.removeEventListeners()},bindMethods:function(){this.onMouseDown=bind(this.onMouseDown,this),this.onMouseMove=bind(this.onMouseMove,this),this.onMouseUp=bind(this.onMouseUp,this),this.onTouchStart=bind(this.onTouchStart,this),this.onTouchMove=bind(this.onTouchMove,this),this.onTouchEnd=bind(this.onTouchEnd,this),this.onEnterVR=bind(this.onEnterVR,this),this.onExitVR=bind(this.onExitVR,this),this.onPointerLockChange=bind(this.onPointerLockChange,this),this.onPointerLockError=bind(this.onPointerLockError,this)},setupMouseControls:function(){this.mouseDown=!1,this.pitchObject=new THREE.Object3D,this.yawObject=new THREE.Object3D,this.yawObject.position.y=10,this.yawObject.add(this.pitchObject),this.updatedPosition=new THREE.Vector3,this.updatedPosition.y=1.6},addEventListeners:function(){var sceneEl=this.el.sceneEl,canvasEl=sceneEl.canvas;canvasEl?(canvasEl.addEventListener("mousedown",this.onMouseDown,{passive:!0}),window.addEventListener("mousemove",this.onMouseMove,{passive:!0}),window.addEventListener("mouseup",this.onMouseUp,{passive:!0}),canvasEl.addEventListener("touchstart",this.onTouchStart,{passive:!0}),window.addEventListener("touchmove",this.onTouchMove,{passive:!0}),window.addEventListener("touchend",this.onTouchEnd,{passive:!0}),sceneEl.addEventListener("enter-vr",this.onEnterVR),sceneEl.addEventListener("exit-vr",this.onExitVR),this.data.pointerLockEnabled&&(document.addEventListener("pointerlockchange",this.onPointerLockChange,!1),document.addEventListener("mozpointerlockchange",this.onPointerLockChange,!1),document.addEventListener("pointerlockerror",this.onPointerLockError,!1))):sceneEl.addEventListener("render-target-loaded",bind(this.addEventListeners,this))},removeEventListeners:function(){var sceneEl=this.el.sceneEl,canvasEl=sceneEl&&sceneEl.canvas;canvasEl&&(canvasEl.removeEventListener("mousedown",this.onMouseDown),window.removeEventListener("mousemove",this.onMouseMove),window.removeEventListener("mouseup",this.onMouseUp),canvasEl.removeEventListener("touchstart",this.onTouchStart),window.removeEventListener("touchmove",this.onTouchMove),window.removeEventListener("touchend",this.onTouchEnd),sceneEl.removeEventListener("enter-vr",this.onEnterVR),sceneEl.removeEventListener("exit-vr",this.onExitVR),document.removeEventListener("pointerlockchange",this.onPointerLockChange,!1),document.removeEventListener("mozpointerlockchange",this.onPointerLockChange,!1),document.removeEventListener("pointerlockerror",this.onPointerLockError,!1))},updateOrientation:function(){var hmdEuler=this.hmdEuler,pitchObject=this.pitchObject,yawObject=this.yawObject,sceneEl=this.el.sceneEl,rotation=this.rotation,updatedPosition=this.updatedPosition,position=this.el.object3D.position;sceneEl.is("vr-mode")&&sceneEl.checkHeadsetConnected()||(mediaController.isFlat?mediaController.isFlatScrollable?position.x=updatedPosition.x:mediaController.cam.components.camera.data.zoom>1&&(position.x=updatedPosition.x,position.y=updatedPosition.y):(this.polyfillControls.update(),hmdEuler.setFromQuaternion(this.polyfillObject.quaternion,"YXZ"),rotation.x=radToDeg(hmdEuler.x)+radToDeg(pitchObject.rotation.x),rotation.y=radToDeg(hmdEuler.y)+radToDeg(yawObject.rotation.y),rotation.z=0,this.el.setAttribute("rotation",rotation)))},onMouseMove:function(event){var pitchObject=this.pitchObject,yawObject=this.yawObject,previousMouseEvent=this.previousMouseEvent,updatedPosition=new THREE.Vector3,movementX,movementY;this.data.enabled&&(this.mouseDown||this.pointerLocked)&&(movementX=event.movementX||event.mozMovementX,movementY=event.movementY||event.mozMovementY,void 0!==movementX&&void 0!==movementY||(movementX=event.screenX-previousMouseEvent.screenX,movementY=event.screenY-previousMouseEvent.screenY),this.previousMouseEvent=event,mediaController.isFlat?mediaController.isFlatScrollable&&(updatedPosition.x=clamp(.5-event.screenX,-.5,.5)):(yawObject.rotation.y-=.002*movementX,pitchObject.rotation.x-=.002*movementY,pitchObject.rotation.x=Math.max(-PI_2,Math.min(PI_2,pitchObject.rotation.x))))},onMouseDown:function(evt){if(this.data.enabled&&0===evt.button){var sceneEl=this.el.sceneEl,canvasEl=sceneEl&&sceneEl.canvas;this.mouseDown=!0,this.previousMouseEvent=evt,document.body.classList.add(GRABBING_CLASS),this.data.pointerLockEnabled&&!this.pointerLocked&&(canvasEl.requestPointerLock?canvasEl.requestPointerLock():canvasEl.mozRequestPointerLock&&canvasEl.mozRequestPointerLock())}},onMouseUp:function(){this.mouseDown=!1,document.body.classList.remove(GRABBING_CLASS)},onTouchStart:function(evt){1===evt.touches.length&&this.data.touchEnabled&&(this.touchStart={x:evt.touches[0].pageX,y:evt.touches[0].pageY},this.touchStarted=!0)},onTouchMove:function(evt){var canvas=this.el.sceneEl.canvas,deltaX,deltaY,pitchObject=this.pitchObject,yawObject=this.yawObject,updatedPosition=this.updatedPosition,position=this.el.object3D.position;if(this.touchStarted&&this.data.touchEnabled){if(mediaController.isFlat){if(mediaController.isFlatScrollable){let offset=mediaController.fillScale/3;updatedPosition.x-=(evt.touches[0].pageX-this.touchStart.x)/canvas.clientWidth,updatedPosition.x=clamp(updatedPosition.x,-offset/2,offset/2)}else if(mediaController.cam.components.camera.data.zoom>1){const zoom=(mediaController.cam.components.camera.data.zoom-1)/2,zoomY=zoom/2;updatedPosition.y+=(evt.touches[0].pageY-this.touchStart.y)/canvas.clientHeight,updatedPosition.y=clamp(updatedPosition.y,1.6-zoomY,zoomY+1.6),updatedPosition.x-=(evt.touches[0].pageX-this.touchStart.x)/canvas.clientWidth,updatedPosition.x=clamp(updatedPosition.x,-zoom,zoom)}}else deltaY=2*Math.PI*(evt.touches[0].pageX-this.touchStart.x)/canvas.clientWidth,deltaX=2*Math.PI*(evt.touches[0].pageY-this.touchStart.y)/canvas.clientHeight,yawObject.rotation.y-=.5*deltaY,pitchObject.rotation.x-=.5*deltaX,pitchObject.rotation.x=Math.max(-PI_2,Math.min(PI_2,pitchObject.rotation.x));this.touchStart={x:evt.touches[0].pageX,y:evt.touches[0].pageY}}},onTouchEnd:function(){this.touchStarted=!1},onEnterVR:function(){this.saveCameraPose()},onExitVR:function(){this.restoreCameraPose(),this.previousHMDPosition.set(0,0,0)},onPointerLockChange:function(){this.pointerLocked=!(!document.pointerLockElement&&!document.mozPointerLockElement)},onPointerLockError:function(){this.pointerLocked=!1},updateGrabCursor:function(enabled){var sceneEl=this.el.sceneEl;function enableGrabCursor(){sceneEl.canvas.classList.add("a-grab-cursor")}function disableGrabCursor(){sceneEl.canvas.classList.remove("a-grab-cursor")}sceneEl.canvas?enabled?enableGrabCursor():disableGrabCursor():enabled?sceneEl.addEventListener("render-target-loaded",enableGrabCursor):sceneEl.addEventListener("render-target-loaded",disableGrabCursor)},saveCameraPose:function(){var el=this.el,position=el.getAttribute("position"),rotation=el.getAttribute("rotation"),hasPositionalTracking=void 0!==this.hasPositionalTracking?this.hasPositionalTracking:checkHasPositionalTracking();!this.savedPose&&hasPositionalTracking&&(this.savedPose={position:this.savedPosition.copy(position),rotation:this.savedRotation.copy(rotation)})},restoreCameraPose:function(){var el=this.el,savedPose=this.savedPose,hasPositionalTracking=void 0!==this.hasPositionalTracking?this.hasPositionalTracking:checkHasPositionalTracking();savedPose&&hasPositionalTracking&&(el.setAttribute("position",savedPose.position),el.setAttribute("rotation",savedPose.rotation),this.savedPose=null)}});